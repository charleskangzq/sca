// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    function "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/function/models"
)

type UpdateTriggerRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 函数名称  */
    FunctionName string `json:"functionName"`

    /* function资源信息 (Optional) */
    FunctionSource *function.FunctionSource `json:"functionSource"`

    /* 触发器configurationId，对应jqs的jrn (Optional) */
    ConfigurationId *string `json:"configurationId"`

    /* jqs批处理大小,eventSource为jqs时必填 (Optional) */
    JqsBatchSize *int `json:"jqsBatchSize"`
}

/*
 * param regionId: Region ID (Required)
 * param functionName: 函数名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateTriggerRequest(
    regionId string,
    functionName string,
) *UpdateTriggerRequest {

	return &UpdateTriggerRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/functions/{functionName}:updatetrigger",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        FunctionName: functionName,
	}
}

/*
 * param regionId: Region ID (Required)
 * param functionName: 函数名称 (Required)
 * param functionSource: function资源信息 (Optional)
 * param configurationId: 触发器configurationId，对应jqs的jrn (Optional)
 * param jqsBatchSize: jqs批处理大小,eventSource为jqs时必填 (Optional)
 */
func NewUpdateTriggerRequestWithAllParams(
    regionId string,
    functionName string,
    functionSource *function.FunctionSource,
    configurationId *string,
    jqsBatchSize *int,
) *UpdateTriggerRequest {

    return &UpdateTriggerRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/functions/{functionName}:updatetrigger",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        FunctionName: functionName,
        FunctionSource: functionSource,
        ConfigurationId: configurationId,
        JqsBatchSize: jqsBatchSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateTriggerRequestWithoutParam() *UpdateTriggerRequest {

    return &UpdateTriggerRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/functions/{functionName}:updatetrigger",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *UpdateTriggerRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param functionName: 函数名称(Required) */
func (r *UpdateTriggerRequest) SetFunctionName(functionName string) {
    r.FunctionName = functionName
}

/* param functionSource: function资源信息(Optional) */
func (r *UpdateTriggerRequest) SetFunctionSource(functionSource *function.FunctionSource) {
    r.FunctionSource = functionSource
}

/* param configurationId: 触发器configurationId，对应jqs的jrn(Optional) */
func (r *UpdateTriggerRequest) SetConfigurationId(configurationId string) {
    r.ConfigurationId = &configurationId
}

/* param jqsBatchSize: jqs批处理大小,eventSource为jqs时必填(Optional) */
func (r *UpdateTriggerRequest) SetJqsBatchSize(jqsBatchSize int) {
    r.JqsBatchSize = &jqsBatchSize
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateTriggerRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateTriggerResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateTriggerResult `json:"result"`
}

type UpdateTriggerResult struct {
    Data function.Trigger `json:"data"`
}