// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    logs "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/logs/models"
)

type CustomLogSearchRequest struct {

    core.JDCloudRequest

    /*   */
    AppName []string `json:"appName"`

    /*  (Optional) */
    From *int64 `json:"from"`

    /*  (Optional) */
    LogTopicId *string `json:"logTopicId"`

    /*  (Optional) */
    Match []logs.Match `json:"match"`

    /*  (Optional) */
    RecordId *string `json:"recordId"`

    /*  (Optional) */
    Resp []string `json:"resp"`

    /*  (Optional) */
    Size *int64 `json:"size"`

    /*  (Optional) */
    Sort *string `json:"sort"`

    /*   */
    TimeRange *logs.DateTimeRange `json:"timeRange"`

    /*  (Optional) */
    Uuid *string `json:"uuid"`
}

/*
 * param appName:  (Required)
 * param timeRange:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCustomLogSearchRequest(
    appName []string,
    timeRange *logs.DateTimeRange,
) *CustomLogSearchRequest {

	return &CustomLogSearchRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/customLogSearch",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        AppName: appName,
        TimeRange: timeRange,
	}
}

/*
 * param appName:  (Required)
 * param from:  (Optional)
 * param logTopicId:  (Optional)
 * param match:  (Optional)
 * param recordId:  (Optional)
 * param resp:  (Optional)
 * param size:  (Optional)
 * param sort:  (Optional)
 * param timeRange:  (Required)
 * param uuid:  (Optional)
 */
func NewCustomLogSearchRequestWithAllParams(
    appName []string,
    from *int64,
    logTopicId *string,
    match []logs.Match,
    recordId *string,
    resp []string,
    size *int64,
    sort *string,
    timeRange *logs.DateTimeRange,
    uuid *string,
) *CustomLogSearchRequest {

    return &CustomLogSearchRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/customLogSearch",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        AppName: appName,
        From: from,
        LogTopicId: logTopicId,
        Match: match,
        RecordId: recordId,
        Resp: resp,
        Size: size,
        Sort: sort,
        TimeRange: timeRange,
        Uuid: uuid,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCustomLogSearchRequestWithoutParam() *CustomLogSearchRequest {

    return &CustomLogSearchRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/customLogSearch",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param appName: (Required) */
func (r *CustomLogSearchRequest) SetAppName(appName []string) {
    r.AppName = appName
}

/* param from: (Optional) */
func (r *CustomLogSearchRequest) SetFrom(from int64) {
    r.From = &from
}

/* param logTopicId: (Optional) */
func (r *CustomLogSearchRequest) SetLogTopicId(logTopicId string) {
    r.LogTopicId = &logTopicId
}

/* param match: (Optional) */
func (r *CustomLogSearchRequest) SetMatch(match []logs.Match) {
    r.Match = match
}

/* param recordId: (Optional) */
func (r *CustomLogSearchRequest) SetRecordId(recordId string) {
    r.RecordId = &recordId
}

/* param resp: (Optional) */
func (r *CustomLogSearchRequest) SetResp(resp []string) {
    r.Resp = resp
}

/* param size: (Optional) */
func (r *CustomLogSearchRequest) SetSize(size int64) {
    r.Size = &size
}

/* param sort: (Optional) */
func (r *CustomLogSearchRequest) SetSort(sort string) {
    r.Sort = &sort
}

/* param timeRange: (Required) */
func (r *CustomLogSearchRequest) SetTimeRange(timeRange *logs.DateTimeRange) {
    r.TimeRange = timeRange
}

/* param uuid: (Optional) */
func (r *CustomLogSearchRequest) SetUuid(uuid string) {
    r.Uuid = &uuid
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CustomLogSearchRequest) GetRegionId() string {
    return ""
}

type CustomLogSearchResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CustomLogSearchResult `json:"result"`
}

type CustomLogSearchResult struct {
    Data []interface{} `json:"data"`
    Hits int64 `json:"hits"`
    Size int64 `json:"size"`
}