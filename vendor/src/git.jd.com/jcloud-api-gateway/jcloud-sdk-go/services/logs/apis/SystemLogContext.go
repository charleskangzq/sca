// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type SystemLogContextRequest struct {

    core.JDCloudRequest

    /*  (Optional) */
    Anchor []interface{} `json:"anchor"`

    /*   */
    AppName string `json:"appName"`

    /*  (Optional) */
    Direction *string `json:"direction"`

    /*  (Optional) */
    Id *string `json:"id"`

    /*  (Optional) */
    LineSize *int64 `json:"lineSize"`

    /*   */
    LogType string `json:"logType"`

    /*  (Optional) */
    Time *int64 `json:"time"`
}

/*
 * param appName:  (Required)
 * param logType:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSystemLogContextRequest(
    appName string,
    logType string,
) *SystemLogContextRequest {

	return &SystemLogContextRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/systemLogContext",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        AppName: appName,
        LogType: logType,
	}
}

/*
 * param anchor:  (Optional)
 * param appName:  (Required)
 * param direction:  (Optional)
 * param id:  (Optional)
 * param lineSize:  (Optional)
 * param logType:  (Required)
 * param time:  (Optional)
 */
func NewSystemLogContextRequestWithAllParams(
    anchor []interface{},
    appName string,
    direction *string,
    id *string,
    lineSize *int64,
    logType string,
    time *int64,
) *SystemLogContextRequest {

    return &SystemLogContextRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/systemLogContext",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Anchor: anchor,
        AppName: appName,
        Direction: direction,
        Id: id,
        LineSize: lineSize,
        LogType: logType,
        Time: time,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSystemLogContextRequestWithoutParam() *SystemLogContextRequest {

    return &SystemLogContextRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/systemLogContext",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param anchor: (Optional) */
func (r *SystemLogContextRequest) SetAnchor(anchor []interface{}) {
    r.Anchor = anchor
}

/* param appName: (Required) */
func (r *SystemLogContextRequest) SetAppName(appName string) {
    r.AppName = appName
}

/* param direction: (Optional) */
func (r *SystemLogContextRequest) SetDirection(direction string) {
    r.Direction = &direction
}

/* param id: (Optional) */
func (r *SystemLogContextRequest) SetId(id string) {
    r.Id = &id
}

/* param lineSize: (Optional) */
func (r *SystemLogContextRequest) SetLineSize(lineSize int64) {
    r.LineSize = &lineSize
}

/* param logType: (Required) */
func (r *SystemLogContextRequest) SetLogType(logType string) {
    r.LogType = logType
}

/* param time: (Optional) */
func (r *SystemLogContextRequest) SetTime(time int64) {
    r.Time = &time
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SystemLogContextRequest) GetRegionId() string {
    return ""
}

type SystemLogContextResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SystemLogContextResult `json:"result"`
}

type SystemLogContextResult struct {
    Data []interface{} `json:"data"`
    Hits int64 `json:"hits"`
    Size int64 `json:"size"`
}