// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
    logs "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/services/logs/models"
)

type DescribeShipperTasksRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志集 UID  */
    LogsetUID string `json:"logsetUID"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* shipperUID  */
    ShipperUID string `json:"shipperUID"`

    /* 当前所在页，默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 页面大小，默认为20；取值范围[1, 100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 查询批次开始时间 格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800” (Optional) */
    StartTime *string `json:"startTime"`

    /* 查询批次结束时间 格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800” (Optional) */
    EndTime *string `json:"endTime"`

    /* 查询时间间隔，优先级比startTime-endTime高，支持1h, 6h, 12h, 1d, 3d, 7d, 14d (Optional) */
    TimeInterval *string `json:"timeInterval"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param shipperUID: shipperUID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeShipperTasksRequest(
    regionId string,
    logsetUID string,
    logtopicUID string,
    shipperUID string,
) *DescribeShipperTasksRequest {

	return &DescribeShipperTasksRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/shippers/{shipperUID}/shipperTasks",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        ShipperUID: shipperUID,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param shipperUID: shipperUID (Required)
 * param pageNumber: 当前所在页，默认为1 (Optional)
 * param pageSize: 页面大小，默认为20；取值范围[1, 100] (Optional)
 * param startTime: 查询批次开始时间 格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800” (Optional)
 * param endTime: 查询批次结束时间 格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800” (Optional)
 * param timeInterval: 查询时间间隔，优先级比startTime-endTime高，支持1h, 6h, 12h, 1d, 3d, 7d, 14d (Optional)
 */
func NewDescribeShipperTasksRequestWithAllParams(
    regionId string,
    logsetUID string,
    logtopicUID string,
    shipperUID string,
    pageNumber *int,
    pageSize *int,
    startTime *string,
    endTime *string,
    timeInterval *string,
) *DescribeShipperTasksRequest {

    return &DescribeShipperTasksRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/shippers/{shipperUID}/shipperTasks",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        ShipperUID: shipperUID,
        PageNumber: pageNumber,
        PageSize: pageSize,
        StartTime: startTime,
        EndTime: endTime,
        TimeInterval: timeInterval,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeShipperTasksRequestWithoutParam() *DescribeShipperTasksRequest {

    return &DescribeShipperTasksRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/shippers/{shipperUID}/shipperTasks",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *DescribeShipperTasksRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param logsetUID: 日志集 UID(Required) */
func (r *DescribeShipperTasksRequest) SetLogsetUID(logsetUID string) {
    r.LogsetUID = logsetUID
}

/* param logtopicUID: 日志主题 UID(Required) */
func (r *DescribeShipperTasksRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}

/* param shipperUID: shipperUID(Required) */
func (r *DescribeShipperTasksRequest) SetShipperUID(shipperUID string) {
    r.ShipperUID = shipperUID
}

/* param pageNumber: 当前所在页，默认为1(Optional) */
func (r *DescribeShipperTasksRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 页面大小，默认为20；取值范围[1, 100](Optional) */
func (r *DescribeShipperTasksRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param startTime: 查询批次开始时间 格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800”(Optional) */
func (r *DescribeShipperTasksRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}

/* param endTime: 查询批次结束时间 格式 “YYYY-MM-DDThh:mm:ssTZD”, 比如 “2018-11-09T15:34:46+0800”(Optional) */
func (r *DescribeShipperTasksRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}

/* param timeInterval: 查询时间间隔，优先级比startTime-endTime高，支持1h, 6h, 12h, 1d, 3d, 7d, 14d(Optional) */
func (r *DescribeShipperTasksRequest) SetTimeInterval(timeInterval string) {
    r.TimeInterval = &timeInterval
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeShipperTasksRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeShipperTasksResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeShipperTasksResult `json:"result"`
}

type DescribeShipperTasksResult struct {
    NumberPages int64 `json:"numberPages"`
    NumberRecords int64 `json:"numberRecords"`
    PageNumber int64 `json:"pageNumber"`
    PageSize int64 `json:"pageSize"`
    ShipperTaskResult []logs.ShipperTaskEnd `json:"shipperTaskResult"`
}