// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "git.jd.com/jcloud-api-gateway/jcloud-sdk-go/core"
)

type CreateShipperRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志集 UID  */
    LogsetUID string `json:"logsetUID"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* 压缩格式，为空不压缩 (Optional) */
    Compress *string `json:"compress"`

    /* 投递格式 json,  origin(原始日志格式), 默认origin (Optional) */
    FileFormat *string `json:"fileFormat"`

    /* 投递文件大小，单位MB，支持200,300,400,500,1000  */
    FileSize int64 `json:"fileSize"`

    /* 转储任务名称  */
    Name string `json:"name"`

    /* 目的地 配置  */
    TargetConf interface{} `json:"targetConf"`

    /* 转储目的地类型 0: oss, 目前只支持oss (Optional) */
    TargetType *int64 `json:"targetType"`

    /* 投递时间间隔单位分钟，5分钟整数倍，支持5,10,15,20,30,60  */
    TimeInterval int64 `json:"timeInterval"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param fileSize: 投递文件大小，单位MB，支持200,300,400,500,1000 (Required)
 * param name: 转储任务名称 (Required)
 * param targetConf: 目的地 配置 (Required)
 * param timeInterval: 投递时间间隔单位分钟，5分钟整数倍，支持5,10,15,20,30,60 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateShipperRequest(
    regionId string,
    logsetUID string,
    logtopicUID string,
    fileSize int64,
    name string,
    targetConf interface{},
    timeInterval int64,
) *CreateShipperRequest {

	return &CreateShipperRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/shippers",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        FileSize: fileSize,
        Name: name,
        TargetConf: targetConf,
        TimeInterval: timeInterval,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param compress: 压缩格式，为空不压缩 (Optional)
 * param fileFormat: 投递格式 json,  origin(原始日志格式), 默认origin (Optional)
 * param fileSize: 投递文件大小，单位MB，支持200,300,400,500,1000 (Required)
 * param name: 转储任务名称 (Required)
 * param targetConf: 目的地 配置 (Required)
 * param targetType: 转储目的地类型 0: oss, 目前只支持oss (Optional)
 * param timeInterval: 投递时间间隔单位分钟，5分钟整数倍，支持5,10,15,20,30,60 (Required)
 */
func NewCreateShipperRequestWithAllParams(
    regionId string,
    logsetUID string,
    logtopicUID string,
    compress *string,
    fileFormat *string,
    fileSize int64,
    name string,
    targetConf interface{},
    targetType *int64,
    timeInterval int64,
) *CreateShipperRequest {

    return &CreateShipperRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/shippers",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        Compress: compress,
        FileFormat: fileFormat,
        FileSize: fileSize,
        Name: name,
        TargetConf: targetConf,
        TargetType: targetType,
        TimeInterval: timeInterval,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateShipperRequestWithoutParam() *CreateShipperRequest {

    return &CreateShipperRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/shippers",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *CreateShipperRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param logsetUID: 日志集 UID(Required) */
func (r *CreateShipperRequest) SetLogsetUID(logsetUID string) {
    r.LogsetUID = logsetUID
}

/* param logtopicUID: 日志主题 UID(Required) */
func (r *CreateShipperRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}

/* param compress: 压缩格式，为空不压缩(Optional) */
func (r *CreateShipperRequest) SetCompress(compress string) {
    r.Compress = &compress
}

/* param fileFormat: 投递格式 json,  origin(原始日志格式), 默认origin(Optional) */
func (r *CreateShipperRequest) SetFileFormat(fileFormat string) {
    r.FileFormat = &fileFormat
}

/* param fileSize: 投递文件大小，单位MB，支持200,300,400,500,1000(Required) */
func (r *CreateShipperRequest) SetFileSize(fileSize int64) {
    r.FileSize = fileSize
}

/* param name: 转储任务名称(Required) */
func (r *CreateShipperRequest) SetName(name string) {
    r.Name = name
}

/* param targetConf: 目的地 配置(Required) */
func (r *CreateShipperRequest) SetTargetConf(targetConf interface{}) {
    r.TargetConf = targetConf
}

/* param targetType: 转储目的地类型 0: oss, 目前只支持oss(Optional) */
func (r *CreateShipperRequest) SetTargetType(targetType int64) {
    r.TargetType = &targetType
}

/* param timeInterval: 投递时间间隔单位分钟，5分钟整数倍，支持5,10,15,20,30,60(Required) */
func (r *CreateShipperRequest) SetTimeInterval(timeInterval int64) {
    r.TimeInterval = timeInterval
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateShipperRequest) GetRegionId() string {
    return r.RegionId
}

type CreateShipperResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateShipperResult `json:"result"`
}

type CreateShipperResult struct {
    UID string `json:"uID"`
}